{"version":3,"sources":["Store.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["writeToLocalStorage","key","value","localStorage","setItem","JSON","stringify","readFromLocalStorage","defaultValue","getItem","parse","Date","clearLocalStorage","initialState","contractions","midContraction","Store","React","createContext","reducer","state","action","type","newid","length","c","start","payload","id","sort","a","b","map","contraction","undefined","end","ContractionListItem","useState","duration","setDuration","useEffect","timer","dateDiffInSeconds","setInterval","clearInterval","toLocaleTimeString","formatTime","Summary","latestContraction","recentDiff","recentDiffDisplay","allDiff","className","TimeSinceLastContraction","totalSeconds","minutes","Math","floor","seconds","toFixed","startDate","endDate","valueOf","App","useContext","dispatch","onClick","slice","window","confirm","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","children","useReducer","Provider","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3f048566.chunk.js","sourcesContent":["import React, {Dispatch } from 'react';\n\n\nconst writeToLocalStorage = (key: string, value: any) => {\n    localStorage.setItem(key, JSON.stringify(value));\n}\n\nfunction readFromLocalStorage(key: string, defaultValue: any) {\n    let value = localStorage.getItem(key);\n\n    if(value !== null){\n        switch(key){\n            case 'contractions':\n                let contractions = JSON.parse(value, (key: string, value: string) => {\n                    if(key === 'start' || key === 'end'){\n                        return new Date(value);\n                    } else {\n                        return value;\n                    }\n                }) as IContraction[];\n                return contractions;\n            default:\n                return JSON.parse(value);\n        }\n    } else {\n        writeToLocalStorage(key, defaultValue);\n    }\n\n    return defaultValue;\n}\n\nconst clearLocalStorage = () => {\n    writeToLocalStorage('contractions', []);\n    writeToLocalStorage('midContraction', false);\n}\n\nconst initialState: IState = {\n    contractions: readFromLocalStorage('contractions', []),\n    midContraction: readFromLocalStorage('midContraction', false)\n};\n\nexport const Store = React.createContext({} as IContext);\n\nfunction reducer(state: IState, action: Action): IState {\n    let contractions;\n    switch(action.type){\n        case 'CONTRACTION_START':\n            let newid = state.contractions.length + 1;\n            let c = {start: action.payload, id: newid};\n\n            contractions = [...state.contractions, c].sort((a, b) => b.id - a.id);\n\n            writeToLocalStorage('contractions', contractions);\n            \n            return {...state, contractions: contractions}\n\n        case 'CONTRACTION_END':\n            contractions = state.contractions.map(\n                contraction => {\n                    if(contraction.end === undefined){\n                        return {...contraction, end: action.payload};\n                    } else {\n                        return contraction;\n                    }\n                }).sort((a, b) => b.id - a.id);\n\n            writeToLocalStorage('contractions', contractions);\n            \n            return {...state, contractions: contractions}\n        case 'TOGGLE_CONTRACTION':\n            writeToLocalStorage('midContraction', !state.midContraction)\n            return {...state, midContraction: !state.midContraction}\n        case 'RESET_CONTRACTIONS':\n            clearLocalStorage();\n            return {...state, contractions: []};\n        case 'RESET_MIDCONTRACTION':\n            return {...state, midContraction: false}\n        default:\n            return state;\n    }\n}\n\ninterface IState{\n    contractions: IContraction[];\n    midContraction: Boolean;\n}\n\nexport interface IContraction{ \n    id: number;\n    start: Date;\n    end?: Date;\n}\n\ntype Action = \n            {type: 'CONTRACTION_START', payload: Date} |\n            {type: 'CONTRACTION_END', payload: Date} |\n            {type: 'TOGGLE_CONTRACTION'} |\n            {type: 'RESET_CONTRACTIONS'} | \n            {type: 'RESET_MIDCONTRACTION'}\n\ninterface IContext{\n    state: IState;\n    dispatch: Dispatch<Action>;\n}\n\nexport const StoreProvider:React.FunctionComponent = ({children}) => {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    const value: IContext = {state, dispatch};\n    return <Store.Provider value={value}>{children}</Store.Provider>\n}","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { Store, IContraction } from '../Store'; \n\nconst App: React.FC = () => {\n  const {state, dispatch} = React.useContext(Store);\n\n  const reset = () => {\n    if(window.confirm(\"Are you sure you want to reset?\")){\n      dispatch({type: 'RESET_CONTRACTIONS'});\n      dispatch({type: 'RESET_MIDCONTRACTION'});\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        {\n          state.midContraction ?\n          <button className=\"contraction end\" onClick={() => {dispatch({type: 'CONTRACTION_END', payload: new Date()}); dispatch({type: 'TOGGLE_CONTRACTION'})} }>end</button>\n          :\n          <button className=\"contraction\" onClick={() => {dispatch({type: 'CONTRACTION_START', payload: new Date()}); dispatch({type: 'TOGGLE_CONTRACTION'})} }>start</button>\n        }\n        <div className=\"summary\">\n          {state.contractions.length > 0 ? <TimeSinceLastContraction latestContraction={state.contractions[0]}></TimeSinceLastContraction> : null}\n          { state.contractions.length > 1 ? <Summary contractions={state.contractions.slice(0, 3)}></Summary> : null}\n        </div>\n        \n      <table>\n        <thead>\n          <tr>\n            <th>Start</th>\n            <th>End</th>\n            <th>Duration</th>\n          </tr>\n        </thead>\n        <tbody>\n          {state.contractions.map(\n            contraction => {\n              return <ContractionListItem key={contraction.id} contraction={contraction}></ContractionListItem>\n            }\n          )}\n        </tbody>\n        </table>\n        {\n          state.contractions.length > 0 ? <button className=\"reset\" onClick={() => reset()}>Reset</button> : null\n        }\n        \n      </main>\n    </div>\n  );\n}\n\nconst ContractionListItem: React.FunctionComponent<{contraction: IContraction}> = ({contraction}) => {\n  \n  const [duration, setDuration] = useState(0);\n\n  useEffect(() => {\n    let timer: any;\n      if(contraction.end === undefined){\n        setDuration(dateDiffInSeconds(new Date(), contraction.start));\n        timer = setInterval(\n          () => {\n            setDuration(dateDiffInSeconds(new Date(), contraction.start));\n          }, 1000\n        )\n      } else {\n        setDuration(dateDiffInSeconds(contraction.end, contraction.start));\n      }\n\n      return(() => {\n        clearInterval(timer);\n      })\n\n    }, [duration, contraction]);\n\n  return (\n    <tr>\n      <td>\n        {contraction.start.toLocaleTimeString()}\n      </td>\n      {\n        contraction.end !== undefined ? <td>{contraction.end.toLocaleTimeString()}</td> : <td></td>\n      }\n      <td>\n          { formatTime(duration) }\n      </td> \n    </tr>)\n}\n\nconst Summary: React.FunctionComponent<{contractions: IContraction[]}> = ({contractions}) => {\n\n  const latestContraction = contractions[0];\n\n  let recentDiff = dateDiffInSeconds(latestContraction.start, contractions[1].end!);\n\n  const recentDiffDisplay = <div><label>Time between last 2 contractions</label> {formatTime(recentDiff)}</div>\n      \n  if(contractions.length === 3){\n    let startDate = latestContraction.end === undefined ? latestContraction.start : latestContraction.end;\n    const allDiff = dateDiffInSeconds(startDate, contractions[2].start);\n    return <>{recentDiffDisplay}<div className={allDiff < 10*60 ? 'alert' : undefined}><label>Time for last 3 contractions</label> {formatTime(allDiff)}</div></>\n  } else {\n    return recentDiffDisplay;\n  }\n}\n\nconst TimeSinceLastContraction: React.FunctionComponent<{latestContraction: IContraction}> = ({latestContraction}) => {\n  const [duration, setDuration] = useState(0);\n  \n  useEffect(() => {\n    let timer: any;\n\n    if(latestContraction.end !== undefined){\n      setDuration(dateDiffInSeconds(new Date(), latestContraction.end!));\n      timer = setInterval(() => {\n        setDuration(dateDiffInSeconds(new Date(), latestContraction.end!));\n      }, 1000)\n    } else {\n      setDuration(0);\n    }\n\n    return(() => clearInterval(timer))\n\n    \n  }, [duration, latestContraction])\n\n  if(latestContraction.end === undefined){\n    return null;\n  } else {\n    return(\n      <div>\n        <label>Time since last Contraction</label>\n        {formatTime(duration)}\n        </div>\n    )\n  }\n\n\n}\n\n\nfunction formatTime(totalSeconds: number){\n  let minutes = Math.floor(totalSeconds/60);\n  let seconds = totalSeconds%60;\n  \n  return `${minutes} Minutes, ${seconds.toFixed(0)} Seconds`;\n}\n\nfunction dateDiffInSeconds(startDate: Date, endDate: Date): number{\n  return (startDate.valueOf() - endDate.valueOf())/1000;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport {StoreProvider} from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<StoreProvider><App /></StoreProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}